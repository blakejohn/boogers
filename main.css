nav ul {
         list-style-type: none;
         overflow: hidden;
         background-color: #df591b;
         margin: 0;
      }   
      nav li {        
         float: left;
      }
      nav li a {
         display: block;
         color: white;
         text-align: center;
         padding: 14px 16px;
         text-decoration: none;
      }
      
      nav li a:hover {
         background-color: #4333FF;
      }
      
      header img {
         width:100%
      }

h1 {
	font-family: "Lucida Bright", Georgia, serif;
	color: #2F2F37;
	font-size: 36px;
	font-style: normal;
	font-variant: normal;
	font-weight: 500;
	line-height: 26.4px;
	margin: 12px;
	text-align: left;
	padding: 0;
}
h2 {
	font-family: "Lucida Bright", Georgia, serif;
	color: #2F2F37;
	font-size: 24px;
	font-style: normal;
	font-variant: normal;
	font-weight: 500;
	line-height: 26.4px;
	margin: 12px;
	text-align: left;
}
p {
	font-family: sans-serif;
	color: #2F2F37;
	font-size: 14px;
	font-style: normal;
	font-variant: normal;
	font-weight: 400;
	line-height: 20px;
	margin-left: 12px;
	margin-right: 12px;
}
a {
	color: #5C25AE;
}
div.transbox {
    	margin: 20px;
    	background-color: #C179BC;
    	border: 1px solid black;
    	opacity: 0.8;
picture, img {
    display: block;
    width: 100%;
    max-width: 100%;
    height: auto;
]

-
	
	@mixin make-container() {
  width: 100%;
  padding-right: ($grid-gutter-width / 2);
  padding-left: ($grid-gutter-width / 2);
  margin-right: auto;
  margin-left: auto;
}


// For each breakpoint, define the maximum width of the container in a media query
@mixin make-container-max-widths($max-widths: $container-max-widths, $breakpoints: $grid-breakpoints) {
  @each $breakpoint, $container-max-width in $max-widths {
    @include media-breakpoint-up($breakpoint, $breakpoints) {
      max-width: $container-max-width;
    }
  }
}

@mixin make-row() {
  display: flex;
  flex-wrap: wrap;
  margin-right: ($grid-gutter-width / -2);
  margin-left: ($grid-gutter-width / -2);
}

@mixin make-col-ready() {
  position: relative;
  // Prevent columns from becoming too narrow when at smaller grid tiers by
  // always setting `width: 100%;`. This works because we use `flex` values
  // later on to override this initial width.
  width: 100%;
  min-height: 1px; // Prevent collapsing
  padding-right: ($grid-gutter-width / 2);
  padding-left: ($grid-gutter-width / 2);
}

@mixin make-col($size, $columns: $grid-columns) {
  flex: 0 0 percentage($size / $columns);
  // Add a `max-width` to ensure content within each column does not blow out
  // the width of the column. Applies to IE10+ and Firefox. Chrome and Safari
  // do not appear to require this.
  max-width: percentage($size / $columns);
}

@mixin make-col-offset($size, $columns: $grid-columns) {
  $num: $size / $columns;
  margin-left: if($num == 0, 0, percentage($num));
}

	
